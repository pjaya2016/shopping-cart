{"ast":null,"code":"import { catchError, shareReplay, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    login(email, password) {\n      console.log('Loging user in');\n      return this.http.post('/auth/login?email=test@test.com&password=test', null).pipe(tap(res => this.setSession(res)), catchError(this.handleError), shareReplay(1));\n    }\n\n    register(register) {\n      console.log('Registering the user');\n      return this.http.post('/auth/register', register).pipe(catchError(this.handleError), shareReplay(1));\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      } // Return an observable with a user-facing error message.\n\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    setSession(successRes) {\n      console.log('Setting session');\n      let res = successRes;\n      console.log(res); //TODO:NEED TO CHECK WHY EXPIRE IN IS NOT COMMING\n\n      const expiresAt = moment().add(moment.duration(2, 'hours'));\n      console.log('Expires at ', moment(expiresAt));\n      localStorage.setItem('id_token', res.token);\n      localStorage.setItem('expires_at', expiresAt.format());\n    }\n\n    logout() {\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at');\n    }\n\n    isLoggedIn() {\n      console.log('is loged in before: ' + moment().isBefore(this.getExpiration()));\n      return moment().isBefore(this.getExpiration());\n    }\n\n    isLoggedOut() {\n      return !this.isLoggedIn();\n    }\n\n    getExpiration() {\n      const expiration = localStorage.getItem('expires_at');\n      return moment(expiration);\n    }\n\n    getAuthenticated() {\n      return this.http.get('/auth/get-authenticated');\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}