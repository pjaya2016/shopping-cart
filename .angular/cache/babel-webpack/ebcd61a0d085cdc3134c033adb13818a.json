{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { includes } from 'lodash';\nimport { catchError } from 'rxjs/operators';\nimport { Notifiy } from './models/Notify';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./NotificationService\";\nexport let APIInterceptor = /*#__PURE__*/(() => {\n  class APIInterceptor {\n    constructor(notificationService) {\n      this.notificationService = notificationService;\n    }\n\n    intercept(req, next) {\n      let cloneObject = {\n        url: `http://localhost:8081/api/v1${req.url}`\n      };\n\n      if (!(includes(req.url, 'login') || includes(req.url, 'register'))) {\n        let obj = {\n          headers: req.headers.set('Authorization', `Bearer ${localStorage.getItem('id_token')}`)\n        };\n        cloneObject = Object.assign(Object.assign({}, cloneObject), obj);\n      }\n\n      const apiReq = req.clone(cloneObject);\n      console.log(apiReq);\n      return next.handle(apiReq).pipe(catchError(error => {\n        var _a;\n\n        if (error.error instanceof ErrorEvent) {// client-side error\n        } else {\n          // server-side error\n          (_a = this.notificationService) === null || _a === void 0 ? void 0 : _a.notifiyGlobalMessage(new Notifiy('error', 'Alert', error.status + ''));\n\n          switch (error.status) {\n            case 403:\n              localStorage.clear();\n              window.location.href = 'login';\n              break;\n          }\n        }\n\n        console.error(error);\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  APIInterceptor.ɵfac = function APIInterceptor_Factory(t) {\n    return new (t || APIInterceptor)(i0.ɵɵinject(i1.NotificationService));\n  };\n\n  APIInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: APIInterceptor,\n    factory: APIInterceptor.ɵfac\n  });\n  return APIInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}