{"ast":null,"code":"import { loadScript } from '@paypal/paypal-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./payment.service\";\nexport let PaymentComponent = /*#__PURE__*/(() => {\n  class PaymentComponent {\n    constructor(paymentService) {\n      this.paymentService = paymentService;\n    }\n\n    ngOnInit() {\n      let _this = this;\n\n      loadScript({\n        'client-id': 'AZ-QCXWz__6uJWjJZNr4PQrapcZuilkENg5ZGLprJ426MeNPpcB65Y9fOexd_1wMCA0ZH2nmEUb8b3pW'\n      }).then(paypal => {\n        if ((paypal === null || paypal === void 0 ? void 0 : paypal.Buttons) != null) {\n          paypal.Buttons({\n            style: {\n              layout: 'vertical',\n              color: 'blue',\n              shape: 'rect',\n              label: 'paypal'\n            },\n            createOrder: function (data, actions) {\n              console.log('Create Order:', data, actions);\n              return actions.order.create({\n                purchase_units: [{\n                  amount: {\n                    currency_code: 'USD',\n                    value: '100',\n                    breakdown: {\n                      item_total: {\n                        /* Required when including the `items` array */\n                        currency_code: 'USD',\n                        value: '100'\n                      }\n                    }\n                  },\n                  items: [{\n                    name: 'First Product Name'\n                    /* Shows within upper-right dropdown during payment approval */\n                    ,\n                    description: 'Optional descriptive text..'\n                    /* Item details will also be in the completed paypal.com transaction view */\n                    ,\n                    unit_amount: {\n                      currency_code: 'USD',\n                      value: '50'\n                    },\n                    quantity: '2'\n                  }]\n                }]\n              });\n            },\n            // Finalize the transaction after payer approval\n            onApprove: function (data, actions) {\n              return actions.order.capture().then(orderData => {\n                // Successful capture! For dev/demo purposes:\n                console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));\n\n                _this.paymentService.getPaymentDetails(orderData).subscribe(res => {\n                  console.log(res);\n                });\n\n                let payments = orderData.purchase_units[0].payments;\n\n                if (payments !== null) {\n                  let x = payments === null || payments === void 0 ? void 0 : payments.captures;\n\n                  if (x !== undefined) {\n                    let transaction = x[0];\n                    alert('Transaction ' + transaction.status + ': ' + transaction.id + '\\n\\nSee console for all available details');\n                  }\n                }\n              });\n            }\n          }).render('#paypal-button-container').catch(error => {\n            console.error('failed to render the PayPal Buttons', error);\n          });\n        }\n      }).catch(error => {\n        console.error('failed to load the PayPal JS SDK script', error);\n      });\n    }\n\n  }\n\n  PaymentComponent.ɵfac = function PaymentComponent_Factory(t) {\n    return new (t || PaymentComponent)(i0.ɵɵdirectiveInject(i1.PaymentService));\n  };\n\n  PaymentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PaymentComponent,\n    selectors: [[\"app-payment\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[\"id\", \"paypal-button-container\"]],\n    template: function PaymentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"payment works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"div\", 0);\n      }\n    },\n    styles: [\"\"]\n  });\n  return PaymentComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}